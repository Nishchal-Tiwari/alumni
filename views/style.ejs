<style>
    /* Globals */

.app{
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
   
  


}
.sidebar{
    
    width: 400px;
    display: flex;
    flex-direction: column;
    align-items: center;
    position: -webkit-sticky; /* for Safari */
  position: sticky;
  top: 50px;
  align-self: flex-start;
   
}
.main{
    z-index: 2;
    width: 50%;
    flex-grow: 1;
    
  
}



body {
font-family: "Inter", sans-serif;
max-width: 55rem;
padding: 2rem 1.5rem;
margin: 0 auto;
color: #241623;
background: #eef2f4;
}

h1 {
font-weight: 900;
font-size: 2.7rem;
max-width: 20ch;
}

p {
max-width: 60ch;
}

a {
color: currentcolor;
}

/* Utilities */
.auto-grid {
display: grid;
grid-template-columns: repeat(
auto-fill,
minmax(var(--auto-grid-min-size, 14rem), 1fr)
);
grid-gap: var(--auto-grid-gap, 0);
padding: 0;
}

.flow > * + * {
margin-top: var(--flow-space, 1em);
}

/* Composition */
.team {
--flow-space: 2em;
}

/* Blocks */
.profile {
display: flex;
flex-direction: column;
justify-content: flex-end;
aspect-ratio: 1/1;
position: relative;
padding: 1.5rem;
color: #ffffff;
backface-visibility: hidden;
text-decoration: none;
overflow: hidden;
}

.profile::before,
.profile::after {
content: "";
width: 100%;
height: 100%;
position: absolute;
/*inset: 0;*/
top: 0;
left: 0;
}

.profile::before {
background: linear-gradient(
to top,
hsl(0 0% 0% / 0.79) 0%,
hsl(0 0% 0% / 0.787) 7.8%,
hsl(0 0% 0% / 0.779) 14.4%,
hsl(0 0% 0% / 0.765) 20.2%,
hsl(0 0% 0% / 0.744) 25.3%,
hsl(0 0% 0% / 0.717) 29.9%,
hsl(0 0% 0% / 0.683) 34.3%,
hsl(0 0% 0% / 0.641) 38.7%,
hsl(0 0% 0% / 0.592) 43.3%,
hsl(0 0% 0% / 0.534) 48.4%,
hsl(0 0% 0% / 0.468) 54.1%,
hsl(0 0% 0% / 0.393) 60.6%,
hsl(0 0% 0% / 0.31) 68.3%,
hsl(0 0% 0% / 0.216) 77.3%,
hsl(0 0% 0% / 0.113) 87.7%,
hsl(0 0% 0% / 0) 100%
);
transition: 300ms opacity linear;
}

.profile::after {
background: linear-gradient(
45deg,
hsl(5 97% 63% / 0.7) 0,
hsl(5 97% 63% / 0) 100%
);
opacity: 0;
transition: 300ms opacity linear;
}

.profile > * {
z-index: 1;
}

.profile img {
width: 100%;
height: 100%;
position: absolute;
top: 0;
left: 0;
margin: 0;
z-index: -1;
object-fit: cover;
filter: grayscale(1);
transition: filter 200ms ease, transform 250ms linear;
}

.profile h2,
.profile p {
transform: translateY(2ex);
}

.profile h2 {
font-size: 1.7rem;
line-height: 1.2;
font-weight: 900;
letter-spacing: 0.03ch;
transition: 300ms transform ease;
}

.profile p {
font-size: 1.2rem;
font-weight: 500;
}

.profile p {
opacity: 0;
transition: 300ms opacity linear, 300ms transform ease-in-out;
}

.profile:focus {
outline: 0.5rem solid white;
outline-offset: -0.5rem;
}

.profile:hover :is(h2, p),
.profile:focus :is(h2, p) {
transform: none;
}

.profile:hover::after,
.profile:focus::after,
.profile:hover::before,
.profile:focus::before {
opacity: 0.7;
}

.profile:hover p,
.profile:focus p {
opacity: 1;
transition-delay: 200ms;
}

.profile:hover img,
.profile:focus img {
filter: grayscale(0);
transform: scale(1.05) rotate(1deg);
}

</style>

<style>
    *{
        margin: 0;
        padding: 0;
        list-style: none;
        
    }
    .autocomplete {
position: relative;
/* display: inline-block; */
width: 500px;
margin: auto;


}

input {
border: 1px solid transparent;
background-color: #f1f1f1;
padding: 10px;
font-size: 16px;
}

input[type=text] {
background-color: #f1f1f1;
width: 100%;
}

input[type=submit] {
background-color: DodgerBlue;
color: #fff;
cursor: pointer;
}

.autocomplete-items {
position: absolute;
border: 1px solid #d4d4d4;
border-bottom: none;
border-top: none;
z-index: 99;
/*position the autocomplete items to be the same width as the container:*/
top: 100%;
left: 0;
right: 0;
}

.autocomplete-items div {
padding: 10px;
cursor: pointer;
background-color: #fff; 
border-bottom: 1px solid #d4d4d4; 
}

/*when hovering an item:*/
.autocomplete-items div:hover {
background-color: #e9e9e9; 
}

/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
background-color: DodgerBlue !important; 
color: #ffffff; 
}

    
   
</style>
       
<script>
    function autocomplete(inp, arr) {
      
      var currentFocus;
      
      inp.addEventListener("input", function(e) {
          var a, b, i, val = this.value;
          closeAllLists();
      if (!val) { return false;}
          currentFocus = -1;
           a = document.createElement("DIV");
          a.setAttribute("id", this.id + "autocomplete-list");
          a.setAttribute("class", "autocomplete-items");
          this.parentNode.appendChild(a);
           for (i = 0; i < arr.length; i++) {
            if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
              b = document.createElement("DIV");
              b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
              b.innerHTML += arr[i].substr(val.length);
              b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
              b.addEventListener("click", function(e) {
                  inp.value = this.getElementsByTagName("input")[0].value;
                 closeAllLists();
              });
              a.appendChild(b);
            }
          }
      });
      inp.addEventListener("keydown", function(e) {
          var x = document.getElementById(this.id + "autocomplete-list");
          if (x) x = x.getElementsByTagName("div");
          if (e.keyCode == 40) {
           currentFocus++;
            addActive(x);
          } else if (e.keyCode == 38) { 
            currentFocus--;
            addActive(x);
          } else if (e.keyCode == 13) {
            e.preventDefault();
            if (currentFocus > -1) {
             if (x) x[currentFocus].click();
            }
          }
      });
      function addActive(x) {
        if (!x) return false;
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        x[currentFocus].classList.add("autocomplete-active");
      }
      function removeActive(x) {
      for (var i = 0; i < x.length; i++) {
          x[i].classList.remove("autocomplete-active");
        }
      }
      function closeAllLists(elmnt) {
       var x = document.getElementsByClassName("autocomplete-items");
        for (var i = 0; i < x.length; i++) {
          if (elmnt != x[i] && elmnt != inp) {
            x[i].parentNode.removeChild(x[i]);
          }
        }
      }
      document.addEventListener("click", function (e) {
          closeAllLists(e.target);
      });
    }
 
    
  </script>  
  